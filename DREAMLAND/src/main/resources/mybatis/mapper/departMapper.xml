<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.dreamland.prj.mapper.DepartMapper">
<resultMap type="DepartmentDto" id="DepartmentMap">
  <id     property="deptNo"   column="DEPT_NO" />
  <result property="deptName" column="DEPT_NAME"/>
  <result property="depth"    column="DEPTH"/>
  <result property="parentId" column="PARENT_ID"/>
  <result property="treeText" column="TREE_TEXT"/>
  <association property="employee"  javaType="EmployeeDto">
     <id     property="empNo"     column="EMP_NO"/>
     <result property="empName"   column="EMP_NAME"/>
     <result property="birth"     column="BIRTH"/>
     <result property="enterDate" column="ENTER_DATE"/>
     <result property="email"     column="EMAIL"/>
     <result property="mobile"    column="MOBILE"/>
     <result property="posNo"     column="POS_NO"/>
     <result property="role"      column="ROLE"/>
   </association>
</resultMap>


  <select id="getDepartList"
          resultMap="DepartmentMap">    
    SELECT D.DEPT_NO, D.DEPT_NAME, D.DEPTH, D.PARENT_ID, D.TREE_TEXT,
	         E.EMP_NO, E.EMP_NAME, E.POS_NO, E.BIRTH, E.ENTER_DATE, E.EMAIL, E.ROLE, LEVEL
	    FROM DEPARTMENT D
      LEFT JOIN EMPLOYEE E ON D.DEPT_NO = E.DEPT_NO
	   START WITH D.PARENT_ID = '#'
	 CONNECT BY PRIOR CAST(D.DEPT_NO AS VARCHAR2(20)) = D.PARENT_ID
  </select>
  
  <!-- 부서 정보 업데이트 -->
	<update id="updateDepart" parameterType="DepartmentDto">
	  UPDATE DEPARTMENT 
	     SET DEPT_NAME = #{deptName}, PARENT_ID = #{parentId}, TREE_TEXT = #{treeText}
	   WHERE DEPT_NO = #{deptNo}
	</update>
	
	<!-- 부서 및 직원 삭제 -->
	<delete id="deleteDepart" parameterType="DepartmentDto">
    DELETE
      FROM DEPARTMENT
     WHERE DEPT_NO = #{deptNo}       
	</delete>
	
	<delete id="deleteEmployee" parameterType="EmployeeDto">
    DELETE
      FROM EMPLOYEE
     WHERE EMP_NO = #{empNo}       
  </delete>
  
  <select id="getEmployeeById" resultType="EmployeeDto" parameterType="String">
    SELECT E.EMP_NO, E.EMP_NAME, E.BIRTH, E.ENTER_DATE, E.EMAIL, E.MOBILE, E.ROLE, E.PROFILE_PATH, D.DEPT_NO, D.DEPT_NAME, P.POS_NO, P.POS_NAME
      FROM EMPLOYEE E
      JOIN DEPARTMENT D ON E.DEPT_NO = D.DEPT_NO
      JOIN POSITION P ON E.POS_NO = P.POS_NO
     WHERE EMAIL = #{email}
  </select>
  
  <!-- 직원 정보 업데이트 -->
  <update id="updateEmployee" parameterType="EmployeeDto">
    UPDATE EMPLOYEE
       SET EMP_NAME = #{empName}, EMAIL = #{email}, MOBILE = #{mobile}, ROLE = #{role}, DEPT_NO = #{deptNo}, POS_NO = #{posNo}
     WHERE EMP_NO = #{empNo}
  </update>

</mapper> 