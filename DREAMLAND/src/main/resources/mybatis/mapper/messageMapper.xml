<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dreamland.prj.mapper.MessageMapper">

  <!-- 자동완성을 위한 직원 리스트 -->
  <select id="getEmployeeList"
          parameterType="map"
          resultType="EmployeeDto">
	SELECT E.EMP_NO, E.EMP_NAME, E.EMAIL, E.MOBILE, E.ROLE, D.DEPT_NO, D.DEPT_NAME, P.POS_NO, P.POS_NAME
	  FROM EMPLOYEE E
	  JOIN DEPARTMENT D ON E.DEPT_NO = D.DEPT_NO
	  JOIN POSITION P ON E.POS_NO = P.POS_NO
	 WHERE (E.EMP_NAME LIKE '%' || #{value} || '%' OR D.DEPT_NAME LIKE '%' || #{value} || '%')
	   AND E.DEPT_NO != 4000
  </select>
  
  <!-- 메시지 보내기 -->
  <insert id="sendMessage"
          parameterType="map">
    <selectKey order="BEFORE" keyProperty="msgNo" resultType="int">
      SELECT MSG_SEQ.NEXTVAL
        FROM DUAL
    </selectKey>
    INSERT INTO MESSAGE (
        MSG_NO
      , MSG_CONTENTS
      , READ_YN
      , SEND_DEL_YN
      , REC_DEL_YN
      , SEND_STAR_YN
      , REC_STAR_YN
      , MSG_CREATE_DT
      , MSG_SENDER
      , MSG_RECEIVER
    ) VALUES (
        #{msgNo}
      , #{contents}
      , 'N'
      , 'N'
      , 'N'
      , 'N'
      , 'N'
      , SYSDATE
      , #{sender}
      , #{receiver}
    )  
  </insert>
  
  <!-- 받은 쪽지 개수 - 중요보관 아님  -->
  <select id="getMessageCountByReceiver">
		SELECT COUNT(*)
		  FROM MESSAGE M JOIN EMPLOYEE ES 
		    ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
		                                  ON M.MSG_RECEIVER = ER.EMP_NO
		 WHERE M.MSG_RECEIVER = ${empNo} 
		   AND M.REC_STAR_YN = 'N' 
		   AND M.REC_DEL_YN = 'N'
  </select>
  
  <!-- 받은 쪽지 개수 - 안읽음/중요보관 아님  -->
  <select id="getMessageCountByRecRead">
		SELECT COUNT(*)
		  FROM MESSAGE M JOIN EMPLOYEE ES 
		                   ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
		                                                 ON M.MSG_RECEIVER = ER.EMP_NO
		 WHERE M.MSG_RECEIVER = ${empNo} 
		   AND M.REC_STAR_YN = 'N' 
		   AND M.READ_YN = 'N' 
		   AND M.REC_DEL_YN = 'N'
  </select>

  <!-- 받은쪽지 리스트  -->
  <select id="getMessageByReceiver"
          parameterType="int"
          resultType="MessageDto">
   SELECT RN, M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN
        , M.REC_STAR_YN, M.SEND_STAR_YN
        , M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
        , ES.EMP_NAME AS SENDER_NAME, ER.EMP_NAME AS RECEIVER_NAME
        , DS.DEPT_NAME AS SENDER_DEPT_NAME, DR.DEPT_NAME AS RECEIVER_DEPT_NAME
        , PS.POS_NAME AS SENDER_POS_NAME, PR.POS_NAME AS RECEIVER_POS_NAME
     FROM (SELECT ROW_NUMBER() OVER (ORDER BY M.MSG_CREATE_DT DESC) AS RN
                , M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.SEND_DEL_YN, M.REC_DEL_YN
                , M.REC_STAR_YN, M.SEND_STAR_YN, M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
             FROM MESSAGE M
            WHERE M.MSG_RECEIVER = #{empNo} 
              AND M.REC_STAR_YN = 'N' 
              AND M.REC_DEL_YN = 'N') M
     JOIN EMPLOYEE ES 
       ON M.MSG_SENDER = ES.EMP_NO
     JOIN EMPLOYEE ER 
       ON M.MSG_RECEIVER = ER.EMP_NO
     JOIN DEPARTMENT DS ON ES.DEPT_NO = DS.DEPT_NO
     JOIN DEPARTMENT DR ON ER.DEPT_NO = DR.DEPT_NO
     JOIN POSITION PS ON ES.POS_NO = PS.POS_NO
     JOIN POSITION PR ON ER.POS_NO = PR.POS_NO
    WHERE M.RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 보낸 쪽지 개수 - 중요보관 아님 -->
  <select id="getMessageCountBySender">
    SELECT COUNT(*)
      FROM MESSAGE M JOIN EMPLOYEE ES 
        ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
                                      ON M.MSG_RECEIVER = ER.EMP_NO
     WHERE M.MSG_SENDER = #{empNo} AND M.SEND_STAR_YN = 'N' AND M.SEND_DEL_YN = 'N'
  </select>
  
  <!-- 보낸쪽지 리스트 -->
  <select id="getMessageBySender"
          parameterType="int"
          resultType="MessageDto">
   SELECT RN, M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN
        , M.REC_STAR_YN, M.SEND_STAR_YN
        , M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
        , ES.EMP_NAME AS SENDER_NAME, ER.EMP_NAME AS RECEIVER_NAME
        , DS.DEPT_NAME AS SENDER_DEPT_NAME, DR.DEPT_NAME AS RECEIVER_DEPT_NAME
        , PS.POS_NAME AS SENDER_POS_NAME, PR.POS_NAME AS RECEIVER_POS_NAME
     FROM (SELECT ROW_NUMBER() OVER (ORDER BY M.MSG_CREATE_DT DESC) AS RN
                , M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN
                , M.REC_STAR_YN, M.SEND_STAR_YN, M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
             FROM MESSAGE M
            WHERE M.MSG_SENDER = #{empNo} 
              AND M.SEND_DEL_YN = 'N' AND M.SEND_STAR_YN = 'N') M
     JOIN EMPLOYEE ES ON M.MSG_SENDER = ES.EMP_NO
     JOIN EMPLOYEE ER ON M.MSG_RECEIVER = ER.EMP_NO
     JOIN DEPARTMENT DS ON ES.DEPT_NO = DS.DEPT_NO
	   JOIN DEPARTMENT DR ON ER.DEPT_NO = DR.DEPT_NO
	   JOIN POSITION PS ON ES.POS_NO = PS.POS_NO
	   JOIN POSITION PR ON ER.POS_NO = PR.POS_NO
    WHERE M.RN BETWEEN #{begin} AND #{end}
  </select>

  <!-- 쪽지 상세보기  -->
  <select id="getMessageDetail"
          parameterType="int"
          resultType="MessageDto">
		SELECT M.MSG_NO, M.MSG_CONTENTS, M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
		     , ES.EMP_NAME AS SENDER_NAME, ER.EMP_NAME AS RECEIVER_NAME
		     , DS.DEPT_NAME AS SENDER_DEPT_NAME, DR.DEPT_NAME AS RECEIVER_DEPT_NAME
		     , PS.POS_NAME AS SENDER_POS_NAME, PR.POS_NAME AS RECEIVER_POS_NAME
		FROM MESSAGE M 
		JOIN EMPLOYEE ES ON M.MSG_SENDER = ES.EMP_NO 
		JOIN EMPLOYEE ER ON M.MSG_RECEIVER = ER.EMP_NO
		JOIN DEPARTMENT DS ON ES.DEPT_NO = DS.DEPT_NO
		JOIN DEPARTMENT DR ON ER.DEPT_NO = DR.DEPT_NO
		JOIN POSITION PS ON ES.POS_NO = PS.POS_NO
		JOIN POSITION PR ON ER.POS_NO = PR.POS_NO
		WHERE M.MSG_NO = #{msgNo}
  </select>
  
  <!-- 읽음 표시 -->
  <update id="updateMsgRead">
    UPDATE MESSAGE
       SET READ_YN = 'Y'
     WHERE MSG_NO = #{msgNo}
  </update>
  
  <!-- 받은쪽지 중요 표시 -->
  <update id="updateRecMsgStar">
    UPDATE MESSAGE
       SET REC_STAR_YN = 'Y'
     WHERE MSG_NO = #{msgNo}
  </update>
  
  <!-- 보낸쪽지 중요 표시 -->
  <update id="updateSendMsgStar">
    UPDATE MESSAGE
       SET SEND_STAR_YN = 'Y'
     WHERE MSG_NO = #{msgNo}
  </update>
  
  <!-- 받은편지 삭제 표시 -->
  <update id="updateRecMsgDelete">
    UPDATE MESSAGE
       SET REC_DEL_YN = 'Y'
         , REC_DEL_DT = SYSDATE
     WHERE MSG_NO = #{msgNo}
  </update>
  
  <!-- 보낸편지 삭제 표시 -->
  <update id="updateSendMsgDelete">
    UPDATE MESSAGE
       SET SEND_DEL_YN = 'Y'
         , SEND_DEL_DT = SYSDATE
     WHERE MSG_NO = #{msgNo}
  </update>
  
  <!-- 중요보관함 개수 - 전체 -->
  <select id="getMessageCountByStar">
    SELECT COUNT(*)
      FROM MESSAGE M JOIN EMPLOYEE ES 
        ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
                                      ON M.MSG_RECEIVER = ER.EMP_NO
     WHERE ((M.MSG_RECEIVER = #{empNo} AND M.REC_STAR_YN = 'Y')
        OR (M.MSG_SENDER = #{empNo} AND M.SEND_STAR_YN = 'Y'))
        AND (M.REC_DEL_YN = 'N' AND M.SEND_DEL_YN = 'N')
  </select>
  
  <!-- 중요보관함 개수 - 읽지 않은 쪽지 -->
  <select id="getMessageCountByStarRead">
    SELECT COUNT(*)
      FROM MESSAGE M JOIN EMPLOYEE ES 
        ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
        ON M.MSG_RECEIVER = ER.EMP_NO
     WHERE ((M.MSG_RECEIVER = #{empNo} AND M.REC_STAR_YN = 'Y') OR (M.MSG_SENDER = #{empNo} AND M.SEND_STAR_YN = 'Y')) 
       AND M.READ_YN = 'N' 
       AND M.REC_DEL_YN = 'N' 
       AND M.SEND_DEL_YN = 'N'
  </select>
  
  <!-- 중요보관함 리스트 -->
  <select id="getMessageByStar"
          parameterType="int"
          resultType="MessageDto">
   SELECT RN, M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN, M.REC_STAR_YN, M.SEND_STAR_YN
        , M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
        , ES.EMP_NAME AS SENDER_NAME, ER.EMP_NAME AS RECEIVER_NAME
        , DS.DEPT_NAME AS SENDER_DEPT_NAME, DR.DEPT_NAME AS RECEIVER_DEPT_NAME
        , PS.POS_NAME AS SENDER_POS_NAME, PR.POS_NAME AS RECEIVER_POS_NAME
     FROM (SELECT ROW_NUMBER() OVER (ORDER BY M.MSG_CREATE_DT DESC) AS RN
                , M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN
                , M.REC_STAR_YN, M.SEND_STAR_YN, M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
             FROM MESSAGE M
            WHERE ((M.MSG_RECEIVER = #{empNo} AND M.REC_STAR_YN = 'Y') 
               OR (M.MSG_SENDER = #{empNo} AND M.SEND_STAR_YN = 'Y'))
              AND M.REC_DEL_YN = 'N' 
              AND M.SEND_DEL_YN = 'N') M
     JOIN EMPLOYEE ES ON M.MSG_SENDER = ES.EMP_NO
     JOIN EMPLOYEE ER ON M.MSG_RECEIVER = ER.EMP_NO
     JOIN DEPARTMENT DS ON ES.DEPT_NO = DS.DEPT_NO
     JOIN DEPARTMENT DR ON ER.DEPT_NO = DR.DEPT_NO
     JOIN POSITION PS ON ES.POS_NO = PS.POS_NO
     JOIN POSITION PR ON ER.POS_NO = PR.POS_NO
    WHERE M.RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 삭제 개수 - 전체 -->
  <select id="getMessageCountByDelete">
    SELECT COUNT(*)
      FROM MESSAGE M JOIN EMPLOYEE ES 
        ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
        ON M.MSG_RECEIVER = ER.EMP_NO
     WHERE (M.MSG_RECEIVER = #{empNo} AND M.REC_DEL_YN = 'Y') 
        OR (M.MSG_SENDER = #{empNo} AND M.SEND_DEL_YN = 'Y')
  </select>
  
  <!-- 삭제 개수 - 읽지 않은 쪽지 -->
  <select id="getMessageCountByDeleteRead">
    SELECT COUNT(*)
      FROM MESSAGE M JOIN EMPLOYEE ES 
        ON M.MSG_SENDER = ES.EMP_NO JOIN EMPLOYEE ER 
        ON M.MSG_RECEIVER = ER.EMP_NO
     WHERE M.READ_YN = 'N' 
       AND ((M.MSG_RECEIVER = #{empNo} AND M.REC_DEL_YN = 'Y') OR (M.MSG_SENDER = #{empNo} AND M.SEND_DEL_YN = 'Y'))
  </select>
  
  <!-- 휴지통 리스트 -->
  <select id="getMessageByDelete"
          parameterType="int"
          resultType="MessageDto">
   SELECT RN, M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN
        , M.REC_STAR_YN, M.SEND_STAR_YN
        , M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
        , ES.EMP_NAME AS SENDER_NAME, ER.EMP_NAME AS RECEIVER_NAME
        , DS.DEPT_NAME AS SENDER_DEPT_NAME, DR.DEPT_NAME AS RECEIVER_DEPT_NAME
        , PS.POS_NAME AS SENDER_POS_NAME, PR.POS_NAME AS RECEIVER_POS_NAME
     FROM (SELECT ROW_NUMBER() OVER (ORDER BY M.MSG_CREATE_DT DESC) AS RN
                , M.MSG_NO, M.MSG_CONTENTS, M.READ_YN, M.REC_DEL_YN, M.SEND_DEL_YN
                , M.REC_STAR_YN, M.SEND_STAR_YN, M.MSG_CREATE_DT, M.MSG_SENDER, M.MSG_RECEIVER
             FROM MESSAGE M
            WHERE (M.MSG_RECEIVER = #{empNo} AND M.REC_DEL_YN = 'Y') 
               OR (M.MSG_SENDER = #{empNo} AND M.SEND_DEL_YN = 'Y')) M
     JOIN EMPLOYEE ES ON M.MSG_SENDER = ES.EMP_NO
     JOIN EMPLOYEE ER ON M.MSG_RECEIVER = ER.EMP_NO
     JOIN DEPARTMENT DS ON ES.DEPT_NO = DS.DEPT_NO
     JOIN DEPARTMENT DR ON ER.DEPT_NO = DR.DEPT_NO
     JOIN POSITION PS ON ES.POS_NO = PS.POS_NO
     JOIN POSITION PR ON ER.POS_NO = PR.POS_NO
    WHERE M.RN BETWEEN #{begin} AND #{end}
  </select>
  
  <!-- 스케줄러용 삭제 -->
  <update id="deleteOldMessages">
	  <![CDATA[
	  UPDATE MESSAGE
	  SET SEND_REAL_DEL = CASE WHEN SEND_DEL_YN = 'Y' THEN 'Y' ELSE 'N' END,
	      REC_REAL_DEL = CASE WHEN REC_DEL_YN = 'Y' THEN 'Y' ELSE 'N' END
	  WHERE (TO_DATE(TO_CHAR(SEND_DEL_DT, 'YYYY-MM-DD'), 'YYYY-MM-DD')) < SYSDATE - 30
	     OR (TO_DATE(TO_CHAR(REC_DEL_DT, 'YYYY-MM-DD'), 'YYYY-MM-DD')) < SYSDATE - 30
	  ]]>
  </update>
  
  <!-- 답장할 사원 정보 가져오기 -->
  <select id="getEmployeeBySender"
          resultType="EmployeeDto">
  SELECT E.EMP_NO, E.EMP_NAME, E.EMAIL, E.MOBILE, E.ROLE, D.DEPT_NO, D.DEPT_NAME, P.POS_NO, P.POS_NAME
    FROM EMPLOYEE E
    JOIN DEPARTMENT D ON E.DEPT_NO = D.DEPT_NO
    JOIN POSITION P ON E.POS_NO = P.POS_NO
   WHERE EMP_NO = #{senderNo}
  </select>
</mapper>